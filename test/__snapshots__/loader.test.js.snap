// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`loader should allow adding dependencies, contextDependencies and buildDependencies via loader context: errors 1`] = `[]`;

exports[`loader should allow adding dependencies, contextDependencies and buildDependencies via loader context: result 1`] = `
"{
  "content": "module.exports = \\"hello world\\";",
  "map": null,
  "meta": null,
  "dependencies": [
    "test/fixtures/dependencies-via-context.js",
    "test/fixtures/args.js",
    "test/fixtures/simple.js"
  ],
  "contextDependencies": [
    "test/fixtures"
  ],
  "buildDependencies": [
    "test/fixtures/args.js",
    "test/fixtures/simple.js",
    "test/fixtures"
  ]
}"
`;

exports[`loader should allow adding dependencies, contextDependencies and buildDependencies via loader context: warnings 1`] = `[]`;

exports[`loader should call the function with the loader options: errors 1`] = `[]`;

exports[`loader should call the function with the loader options: result 1`] = `
"{
  "content": "module.exports = \\"hello world\\";",
  "map": null,
  "meta": [
    {
      "arg": 123,
      "arg2": "string",
      "arg3": true,
      "arg4": null,
      "arg6": {}
    }
  ],
  "dependencies": [
    "test/fixtures/args.js"
  ],
  "contextDependencies": [],
  "buildDependencies": []
}"
`;

exports[`loader should call the function with the loader options: warnings 1`] = `[]`;

exports[`loader should flag the module as cacheable if requested: errors 1`] = `[]`;

exports[`loader should flag the module as cacheable if requested: result 1`] = `
"{
  "content": "module.exports = \\"hello world\\";",
  "map": null,
  "meta": null,
  "dependencies": [
    "test/fixtures/cacheable.js"
  ],
  "contextDependencies": [],
  "buildDependencies": []
}"
`;

exports[`loader should flag the module as cacheable if requested: warnings 1`] = `[]`;

exports[`loader should flag the module as not cacheable by default: errors 1`] = `[]`;

exports[`loader should flag the module as not cacheable by default: result 1`] = `
"{
  "content": "module.exports = \\"hello world\\";",
  "map": {
    "isASourceMap": true
  },
  "meta": {
    "isAnAst": true
  },
  "dependencies": [
    "test/fixtures/simple.js"
  ],
  "contextDependencies": [],
  "buildDependencies": []
}"
`;

exports[`loader should flag the module as not cacheable by default: warnings 1`] = `[]`;

exports[`loader should handle dependencies, contextDependencies and buildDependencies of the module: errors 1`] = `[]`;

exports[`loader should handle dependencies, contextDependencies and buildDependencies of the module: result 1`] = `
"{
  "content": "module.exports = \\"hello world\\";",
  "map": null,
  "meta": null,
  "dependencies": [
    "test/fixtures/dependencies.js",
    "test/fixtures/args.js",
    "test/fixtures/simple.js"
  ],
  "contextDependencies": [
    "test/fixtures"
  ],
  "buildDependencies": [
    "test/fixtures/args.js",
    "test/fixtures/simple.js"
  ]
}"
`;

exports[`loader should handle dependencies, contextDependencies and buildDependencies of the module: warnings 1`] = `[]`;

exports[`loader should has module.parent: errors 1`] = `[]`;

exports[`loader should has module.parent: result 1`] = `
"{
  "content": "module.exports = \\"hello world\\";",
  "map": {
    "isASourceMap": true
  },
  "meta": {
    "isAnAst": true,
    "hasParent": true
  },
  "dependencies": [
    "test/fixtures/module-parent.js"
  ],
  "contextDependencies": [],
  "buildDependencies": []
}"
`;

exports[`loader should has module.parent: warnings 1`] = `[]`;

exports[`loader should keep dependencies if errors are emitted: errors 1`] = `
[
  "ModuleError: Module Error (from \`replaced original path\`):
(Emitted value instead of an instance of Error) Error: Calling the function failed",
]
`;

exports[`loader should keep dependencies if errors are emitted: result 1`] = `
"{
  "content": "module.exports = \\"hello world\\";",
  "map": null,
  "meta": null,
  "dependencies": [
    "test/fixtures/error-emitted-with-dependencies.js",
    "test/fixtures/args.js",
    "test/fixtures/simple.js"
  ],
  "contextDependencies": [
    "test/fixtures"
  ],
  "buildDependencies": []
}"
`;

exports[`loader should keep dependencies if errors are emitted: warnings 1`] = `[]`;

exports[`loader should not swallow function call errors (async): errors 1`] = `
[
  "ModuleBuildError: Module build failed (from \`replaced original path\`):
Error: Module "/test/fixtures/error-call-async.js" throw error: Error: Calling the function failed asynchronously",
]
`;

exports[`loader should not swallow function call errors (async): warnings 1`] = `[]`;

exports[`loader should not swallow function call errors (sync): errors 1`] = `
[
  "ModuleBuildError: Module build failed (from \`replaced original path\`):
Error: Module "/test/fixtures/error-call-sync.js" throw error: Error: Calling the function failed",
]
`;

exports[`loader should not swallow function call errors (sync): warnings 1`] = `[]`;

exports[`loader should pass on the code from the buffer fixture: errors 1`] = `[]`;

exports[`loader should pass on the code from the buffer fixture: result 1`] = `
"{
  "content": "module.exports = \\"hello world\\";",
  "map": {
    "isASourceMap": true
  },
  "meta": {
    "isAnAst": true
  },
  "dependencies": [
    "test/fixtures/buffer.js"
  ],
  "contextDependencies": [],
  "buildDependencies": []
}"
`;

exports[`loader should pass on the code from the buffer fixture: warnings 1`] = `[]`;

exports[`loader should pass on the code from the presets/figlet fixture: errors 1`] = `[]`;

exports[`loader should pass on the code from the presets/figlet fixture: result 1`] = `
"{
  "content": "module.exports = module.exports = decode
  "map": null,
  "meta": null,
  "dependencies": [
    "test/fixtures/presets/figlet.js"
  ],
  "contextDependencies": [],
  "buildDependencies": []
}"
`;

exports[`loader should pass on the code from the presets/figlet fixture: warnings 1`] = `[]`;

exports[`loader should pass on the code from the presets/modernizr fixture: errors 1`] = `[]`;

exports[`loader should pass on the code from the presets/modernizr fixture: result 1`] = `
"{
  "content": "var modernizr; var hadGlobal = 'Modernizr' in window; var oldGlobal = window.Modernizr; /*!\\n * modernizr v3.13.0\\n * Build https://modernizr.com/download?-flexbox-promises-serviceworker-setclasses-dontmin\\n *\\n * Copyright (c)\\n *  Faruk Ates\\n *  Paul Irish\\n *  Alex Sexton\\n *  Ryan Seddon\\n *  Patrick Kettner\\n *  Stu Cox\\n *  Richard Herrera\\n *  Veeck\\n\\n * MIT License\\n */\\n\\n/*\\n * Modernizr tests which native CSS3 and HTML5 features are available in the\\n * current UA and makes the results available to you in two ways: as properties on\\n * a global \`Modernizr\` object, and as classes on the \`<html>\` element. This\\n * information allows you to progressively enhance your pages with a granular level\\n * of control over the experience.\\n*/\\n\\n;(function(scriptGlobalObject, window, document, undefined){\\n\\n  var tests = [];\\n  \\n\\n  /**\\n   * ModernizrProto is the constructor for Modernizr\\n   *\\n   * @class\\n   * @access public\\n   */\\n  var ModernizrProto = {\\n    _version: '3.13.0',\\n\\n    // Any settings that don't work as separate modules\\n    // can go in here as configuration.\\n    _config: {\\n      'classPrefix': '',\\n      'enableClasses': true,\\n      'enableJSClass': true,\\n      'usePrefixes': true\\n    },\\n\\n    // Queue of tests\\n    _q: [],\\n\\n    // Stub these for people who are listening\\n    on: function(test, cb) {\\n      // I don't really think people should do this, but we can\\n      // safe guard it a bit.\\n      // -- NOTE:: this gets WAY overridden in src/addTest for actual async tests.\\n      // This is in case people listen to synchronous tests. I would leave it out,\\n      // but the code to *disallow* sync tests in the real version of this\\n      // function is actually larger than this.\\n      var self = this;\\n      setTimeout(function() {\\n        cb(self[test]);\\n      }, 0);\\n    },\\n\\n    addTest: function(name, fn, options) {\\n      tests.push({name: name, fn: fn, options: options});\\n    },\\n\\n    addAsyncTest: function(fn) {\\n      tests.push({name: null, fn: fn});\\n    }\\n  };\\n\\n  \\n\\n  // Fake some of Object.create so we can force non test results to be non \\"own\\" properties.\\n  var Modernizr = function() {};\\n  Modernizr.prototype = ModernizrProto;\\n\\n  // Leak modernizr globally when you \`require\` it rather than force it here.\\n  // Overwrite name so constructor name is nicer :D\\n  Modernizr = new Modernizr();\\n\\n  \\n\\n  var classes = [];\\n  \\n\\n  /**\\n   * is returns a boolean if the typeof an obj is exactly type.\\n   *\\n   * @access private\\n   * @function is\\n   * @param {*} obj - A thing we want to check the type of\\n   * @param {string} type - A string to compare the typeof against\\n   * @returns {boolean} true if the typeof the first parameter is exactly the specified type, false otherwise\\n   */\\n  function is(obj, type) {\\n    return typeof obj === type;\\n  }\\n\\n  ;\\n\\n  /**\\n   * Run through all tests and detect their support in the current UA.\\n   *\\n   * @access private\\n   * @returns {void}\\n   */\\n  function testRunner() {\\n    var featureNames;\\n    var feature;\\n    var aliasIdx;\\n    var result;\\n    var nameIdx;\\n    var featureName;\\n    var featureNameSplit;\\n\\n    for (var featureIdx in tests) {\\n      if (tests.hasOwnProperty(featureIdx)) {\\n        featureNames = [];\\n        feature = tests[featureIdx];\\n        // run the test, throw the return value into the Modernizr,\\n        // then based on that boolean, define an appropriate className\\n        // and push it into an array of classes we'll join later.\\n        //\\n        // If there is no name, it's an 'async' test that is run,\\n        // but not directly added to the object. That should\\n        // be done with a post-run addTest call.\\n        if (feature.name) {\\n          featureNames.push(feature.name.toLowerCase());\\n\\n          if (feature.options && feature.options.aliases && feature.options.aliases.length) {\\n            // Add all the aliases into the names list\\n            for (aliasIdx = 0; aliasIdx < feature.options.aliases.length; aliasIdx++) {\\n              featureNames.push(feature.options.aliases[aliasIdx].toLowerCase());\\n            }\\n          }\\n        }\\n\\n        // Run the test, or use the raw value if it's not a function\\n        result = is(feature.fn, 'function') ? feature.fn() : feature.fn;\\n\\n        // Set each of the names on the Modernizr object\\n        for (nameIdx = 0; nameIdx < featureNames.length; nameIdx++) {\\n          featureName = featureNames[nameIdx];\\n          // Support dot properties as sub tests. We don't do checking to make sure\\n          // that the implied parent tests have been added. You must call them in\\n          // order (either in the test, or make the parent test a dependency).\\n          //\\n          // Cap it to TWO to make the logic simple and because who needs that kind of subtesting\\n          // hashtag famous last words\\n          featureNameSplit = featureName.split('.');\\n\\n          if (featureNameSplit.length === 1) {\\n            Modernizr[featureNameSplit[0]] = result;\\n          } else {\\n            // cast to a Boolean, if not one already or if it doesnt exist yet (like inputtypes)\\n            if (!Modernizr[featureNameSplit[0]] || Modernizr[featureNameSplit[0]] && !(Modernizr[featureNameSplit[0]] instanceof Boolean)) {\\n              Modernizr[featureNameSplit[0]] = new Boolean(Modernizr[featureNameSplit[0]]);\\n            }\\n\\n            Modernizr[featureNameSplit[0]][featureNameSplit[1]] = result;\\n          }\\n\\n          classes.push((result ? '' : 'no-') + featureNameSplit.join('-'));\\n        }\\n      }\\n    }\\n  }\\n  ;\\n\\n  /**\\n   * docElement is a convenience wrapper to grab the root element of the document\\n   *\\n   * @access private\\n   * @returns {HTMLElement|SVGElement} The root element of the document\\n   */\\n  var docElement = document.documentElement;\\n  \\n\\n  /**\\n   * A convenience helper to check if the document we are running in is an SVG document\\n   *\\n   * @access private\\n   * @returns {boolean}\\n   */\\n  var isSVG = docElement.nodeName.toLowerCase() === 'svg';\\n\\n  \\n\\n  /**\\n   * setClasses takes an array of class names and adds them to the root element\\n   *\\n   * @access private\\n   * @function setClasses\\n   * @param {string[]} classes - Array of class names\\n   */\\n  // Pass in an and array of class names, e.g.:\\n  //  ['no-webp', 'borderradius', ...]\\n  function setClasses(classes) {\\n    var className = docElement.className;\\n    var classPrefix = Modernizr._config.classPrefix || '';\\n\\n    if (isSVG) {\\n      className = className.baseVal;\\n    }\\n\\n    // Change \`no-js\` to \`js\` (independently of the \`enableClasses\` option)\\n    // Handle classPrefix on this too\\n    if (Modernizr._config.enableJSClass) {\\n      var reJS = new RegExp('(^|\\\\\\\\s)' + classPrefix + 'no-js(\\\\\\\\s|$)');\\n      className = className.replace(reJS, '$1' + classPrefix + 'js$2');\\n    }\\n\\n    if (Modernizr._config.enableClasses) {\\n      // Add the new classes\\n      if (classes.length > 0) {\\n        className += ' ' + classPrefix + classes.join(' ' + classPrefix);\\n      }\\n      if (isSVG) {\\n        docElement.className.baseVal = className;\\n      } else {\\n        docElement.className = className;\\n      }\\n    }\\n  }\\n\\n  ;\\n\\n  /**\\n   * If the browsers follow the spec, then they would expose vendor-specific styles as:\\n   *   elem.style.WebkitBorderRadius\\n   * instead of something like the following (which is technically incorrect):\\n   *   elem.style.webkitBorderRadius\\n   *\\n   * WebKit ghosts their properties in lowercase but Opera & Moz do not.\\n   * Microsoft uses a lowercase \`ms\` instead of the correct \`Ms\` in IE8+\\n   *   erik.eae.net/archives/2008/03/10/21.48.10/\\n   *\\n   * More here: github.com/Modernizr/Modernizr/issues/issue/21\\n   *\\n   * @access private\\n   * @returns {string} The string representing the vendor-specific style properties\\n   */\\n  var omPrefixes = 'Moz O ms Webkit';\\n  \\n\\n  var cssomPrefixes = (ModernizrProto._config.usePrefixes ? omPrefixes.split(' ') : []);\\n  ModernizrProto._cssomPrefixes = cssomPrefixes;\\n  \\n\\n  /**\\n   * contains checks to see if a string contains another string\\n   *\\n   * @access private\\n   * @function contains\\n   * @param {string} str - The string we want to check for substrings\\n   * @param {string} substr - The substring we want to search the first string for\\n   * @returns {boolean} true if and only if the first string 'str' contains the second string 'substr'\\n   */\\n  function contains(str, substr) {\\n    return !!~('' + str).indexOf(substr);\\n  }\\n\\n  ;\\n\\n  /**\\n   * createElement is a convenience wrapper around document.createElement. Since we\\n   * use createElement all over the place, this allows for (slightly) smaller code\\n   * as well as abstracting away issues with creating elements in contexts other than\\n   * HTML documents (e.g. SVG documents).\\n   *\\n   * @access private\\n   * @function createElement\\n   * @returns {HTMLElement|SVGElement} An HTML or SVG element\\n   */\\n  function createElement() {\\n    if (typeof document.createElement !== 'function') {\\n      // This is the case in IE7, where the type of createElement is \\"object\\".\\n      // For this reason, we cannot call apply() as Object is not a Function.\\n      return document.createElement(arguments[0]);\\n    } else if (isSVG) {\\n      return document.createElementNS.call(document, 'http://www.w3.org/2000/svg', arguments[0]);\\n    } else {\\n      return document.createElement.apply(document, arguments);\\n    }\\n  }\\n\\n  ;\\n\\n  /**\\n   * Create our \\"modernizr\\" element that we do most feature tests on.\\n   *\\n   * @access private\\n   */\\n  var modElem = {\\n    elem: createElement('modernizr')\\n  };\\n\\n  // Clean up this element\\n  Modernizr._q.push(function() {\\n    delete modElem.elem;\\n  });\\n\\n  \\n\\n  var mStyle = {\\n    style: modElem.elem.style\\n  };\\n\\n  // kill ref for gc, must happen before mod.elem is removed, so we unshift on to\\n  // the front of the queue.\\n  Modernizr._q.unshift(function() {\\n    delete mStyle.style;\\n  });\\n\\n  \\n\\n  /**\\n   * getBody returns the body of a document, or an element that can stand in for\\n   * the body if a real body does not exist\\n   *\\n   * @access private\\n   * @function getBody\\n   * @returns {HTMLElement|SVGElement} Returns the real body of a document, or an\\n   * artificially created element that stands in for the body\\n   */\\n  function getBody() {\\n    // After page load injecting a fake body doesn't work so check if body exists\\n    var body = document.body;\\n\\n    if (!body) {\\n      // Can't use the real body create a fake one.\\n      body = createElement(isSVG ? 'svg' : 'body');\\n      body.fake = true;\\n    }\\n\\n    return body;\\n  }\\n\\n  ;\\n\\n  /**\\n   * injectElementWithStyles injects an element with style element and some CSS rules\\n   *\\n   * @access private\\n   * @function injectElementWithStyles\\n   * @param {string} rule - String representing a css rule\\n   * @param {Function} callback - A function that is used to test the injected element\\n   * @param {number} [nodes] - An integer representing the number of additional nodes you want injected\\n   * @param {string[]} [testnames] - An array of strings that are used as ids for the additional nodes\\n   * @returns {boolean} the result of the specified callback test\\n   */\\n  function injectElementWithStyles(rule, callback, nodes, testnames) {\\n    var mod = 'modernizr';\\n    var style;\\n    var ret;\\n    var node;\\n    var docOverflow;\\n    var div = createElement('div');\\n    var body = getBody();\\n\\n    if (parseInt(nodes, 10)) {\\n      // In order not to give false positives we create a node for each test\\n      // This also allows the method to scale for unspecified uses\\n      while (nodes--) {\\n        node = createElement('div');\\n        node.id = testnames ? testnames[nodes] : mod + (nodes + 1);\\n        div.appendChild(node);\\n      }\\n    }\\n\\n    style = createElement('style');\\n    style.type = 'text/css';\\n    style.id = 's' + mod;\\n\\n    // IE6 will false positive on some tests due to the style element inside the test div somehow interfering offsetHeight, so insert it into body or fakebody.\\n    // Opera will act all quirky when injecting elements in documentElement when page is served as xml, needs fakebody too. #270\\n    (!body.fake ? div : body).appendChild(style);\\n    body.appendChild(div);\\n\\n    if (style.styleSheet) {\\n      style.styleSheet.cssText = rule;\\n    } else {\\n      style.appendChild(document.createTextNode(rule));\\n    }\\n    div.id = mod;\\n\\n    if (body.fake) {\\n      //avoid crashing IE8, if background image is used\\n      body.style.background = '';\\n      //Safari 5.13/5.1.4 OSX stops loading if ::-webkit-scrollbar is used and scrollbars are visible\\n      body.style.overflow = 'hidden';\\n      docOverflow = docElement.style.overflow;\\n      docElement.style.overflow = 'hidden';\\n      docElement.appendChild(body);\\n    }\\n\\n    ret = callback(div, rule);\\n    // If this is done after page load we don't want to remove the body so check if body exists\\n    if (body.fake && body.parentNode) {\\n      body.parentNode.removeChild(body);\\n      docElement.style.overflow = docOverflow;\\n      // Trigger layout so kinetic scrolling isn't disabled in iOS6+\\n      // eslint-disable-next-line\\n      docElement.offsetHeight;\\n    } else {\\n      div.parentNode.removeChild(div);\\n    }\\n\\n    return !!ret;\\n  }\\n\\n  ;\\n\\n  /**\\n   * domToCSS takes a camelCase string and converts it to hyphen-case\\n   * e.g. boxSizing -> box-sizing\\n   *\\n   * @access private\\n   * @function domToCSS\\n   * @param {string} name - String name of camelCase prop we want to convert\\n   * @returns {string} The hyphen-case version of the supplied name\\n   */\\n  function domToCSS(name) {\\n    return name.replace(/([A-Z])/g, function(str, m1) {\\n      return '-' + m1.toLowerCase();\\n    }).replace(/^ms-/, '-ms-');\\n  }\\n\\n  ;\\n\\n\\n  /**\\n   * wrapper around getComputedStyle, to fix issues with Firefox returning null when\\n   * called inside of a hidden iframe\\n   *\\n   * @access private\\n   * @function computedStyle\\n   * @param {HTMLElement|SVGElement} elem - The element we want to find the computed styles of\\n   * @param {string|null} [pseudo] - An optional pseudo element selector (e.g. :before), of null if none\\n   * @param {string} prop - A CSS property\\n   * @returns {CSSStyleDeclaration} the value of the specified CSS property\\n   */\\n  function computedStyle(elem, pseudo, prop) {\\n    var result;\\n\\n    if ('getComputedStyle' in window) {\\n      result = getComputedStyle.call(window, elem, pseudo);\\n      var console = window.console;\\n\\n      if (result !== null) {\\n        if (prop) {\\n          result = result.getPropertyValue(prop);\\n        }\\n      } else {\\n        if (console) {\\n          var method = console.error ? 'error' : 'log';\\n          console[method].call(console, 'getComputedStyle returning null, its possible modernizr test results are inaccurate');\\n        }\\n      }\\n    } else {\\n      result = !pseudo && elem.currentStyle && elem.currentStyle[prop];\\n    }\\n\\n    return result;\\n  }\\n\\n  ;\\n\\n  /**\\n   * nativeTestProps allows for us to use native feature detection functionality if available.\\n   * some prefixed form, or false, in the case of an unsupported rule\\n   *\\n   * @access private\\n   * @function nativeTestProps\\n   * @param {Array} props - An array of property names\\n   * @param {string} value - A string representing the value we want to check via @supports\\n   * @returns {boolean|undefined} A boolean when @supports exists, undefined otherwise\\n   */\\n  // Accepts a list of property names and a single value\\n  // Returns \`undefined\` if native detection not available\\n  function nativeTestProps(props, value) {\\n    var i = props.length;\\n    // Start with the JS API: https://www.w3.org/TR/css3-conditional/#the-css-interface\\n    if ('CSS' in window && 'supports' in window.CSS) {\\n      // Try every prefixed variant of the property\\n      while (i--) {\\n        if (window.CSS.supports(domToCSS(props[i]), value)) {\\n          return true;\\n        }\\n      }\\n      return false;\\n    }\\n    // Otherwise fall back to at-rule (for Opera 12.x)\\n    else if ('CSSSupportsRule' in window) {\\n      // Build a condition string for every prefixed variant\\n      var conditionText = [];\\n      while (i--) {\\n        conditionText.push('(' + domToCSS(props[i]) + ':' + value + ')');\\n      }\\n      conditionText = conditionText.join(' or ');\\n      return injectElementWithStyles('@supports (' + conditionText + ') { #modernizr { position: absolute; } }', function(node) {\\n        return computedStyle(node, null, 'position') === 'absolute';\\n      });\\n    }\\n    return undefined;\\n  }\\n  ;\\n\\n  /**\\n   * cssToDOM takes a hyphen-case string and converts it to camelCase\\n   * e.g. box-sizing -> boxSizing\\n   *\\n   * @access private\\n   * @function cssToDOM\\n   * @param {string} name - String name of hyphen-case prop we want to convert\\n   * @returns {string} The camelCase version of the supplied name\\n   */\\n  function cssToDOM(name) {\\n    return name.replace(/([a-z])-([a-z])/g, function(str, m1, m2) {\\n      return m1 + m2.toUpperCase();\\n    }).replace(/^-/, '');\\n  }\\n\\n  ;\\n\\n  // testProps is a generic CSS / DOM property test.\\n\\n  // In testing support for a given CSS property, it's legit to test:\\n  //    \`elem.style[styleName] !== undefined\`\\n  // If the property is supported it will return an empty string,\\n  // if unsupported it will return undefined.\\n\\n  // We'll take advantage of this quick test and skip setting a style\\n  // on our modernizr element, but instead just testing undefined vs\\n  // empty string.\\n\\n  // Property names can be provided in either camelCase or hyphen-case.\\n\\n  function testProps(props, prefixed, value, skipValueTest) {\\n    skipValueTest = is(skipValueTest, 'undefined') ? false : skipValueTest;\\n\\n    // Try native detect first\\n    if (!is(value, 'undefined')) {\\n      var result = nativeTestProps(props, value);\\n      if (!is(result, 'undefined')) {\\n        return result;\\n      }\\n    }\\n\\n    // Otherwise do it properly\\n    var afterInit, i, propsLength, prop, before;\\n\\n    // If we don't have a style element, that means we're running async or after\\n    // the core tests, so we'll need to create our own elements to use.\\n\\n    // Inside of an SVG element, in certain browsers, the \`style\` element is only\\n    // defined for valid tags. Therefore, if \`modernizr\` does not have one, we\\n    // fall back to a less used element and hope for the best.\\n    // For strict XHTML browsers the hardly used samp element is used.\\n    var elems = ['modernizr', 'tspan', 'samp'];\\n    while (!mStyle.style && elems.length) {\\n      afterInit = true;\\n      mStyle.modElem = createElement(elems.shift());\\n      mStyle.style = mStyle.modElem.style;\\n    }\\n\\n    // Delete the objects if we created them.\\n    function cleanElems() {\\n      if (afterInit) {\\n        delete mStyle.style;\\n        delete mStyle.modElem;\\n      }\\n    }\\n\\n    propsLength = props.length;\\n    for (i = 0; i < propsLength; i++) {\\n      prop = props[i];\\n      before = mStyle.style[prop];\\n\\n      if (contains(prop, '-')) {\\n        prop = cssToDOM(prop);\\n      }\\n\\n      if (mStyle.style[prop] !== undefined) {\\n\\n        // If value to test has been passed in, do a set-and-check test.\\n        // 0 (integer) is a valid property value, so check that \`value\` isn't\\n        // undefined, rather than just checking it's truthy.\\n        if (!skipValueTest && !is(value, 'undefined')) {\\n\\n          // Needs a try catch block because of old IE. This is slow, but will\\n          // be avoided in most cases because \`skipValueTest\` will be used.\\n          try {\\n            mStyle.style[prop] = value;\\n          } catch (e) {}\\n\\n          // If the property value has changed, we assume the value used is\\n          // supported. If \`value\` is empty string, it'll fail here (because\\n          // it hasn't changed), which matches how browsers have implemented\\n          // CSS.supports()\\n          if (mStyle.style[prop] !== before) {\\n            cleanElems();\\n            return prefixed === 'pfx' ? prop : true;\\n          }\\n        }\\n        // Otherwise just return true, or the property name if this is a\\n        // \`prefixed()\` call\\n        else {\\n          cleanElems();\\n          return prefixed === 'pfx' ? prop : true;\\n        }\\n      }\\n    }\\n    cleanElems();\\n    return false;\\n  }\\n\\n  ;\\n\\n  /**\\n   * List of JavaScript DOM values used for tests\\n   *\\n   * @memberOf Modernizr\\n   * @name Modernizr._domPrefixes\\n   * @optionName Modernizr._domPrefixes\\n   * @optionProp domPrefixes\\n   * @access public\\n   * @example\\n   *\\n   * Modernizr._domPrefixes is exactly the same as [_prefixes](#modernizr-_prefixes), but rather\\n   * than hyphen-case properties, all properties are their Capitalized variant\\n   *\\n   * \`\`\`js\\n   * Modernizr._domPrefixes === [ \\"Moz\\", \\"O\\", \\"ms\\", \\"Webkit\\" ];\\n   * \`\`\`\\n   */\\n  var domPrefixes = (ModernizrProto._config.usePrefixes ? omPrefixes.toLowerCase().split(' ') : []);\\n  ModernizrProto._domPrefixes = domPrefixes;\\n  \\n\\n  /**\\n   * fnBind is a super small [bind](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind) polyfill.\\n   *\\n   * @access private\\n   * @function fnBind\\n   * @param {Function} fn - a function you want to change \`this\` reference to\\n   * @param {object} that - the \`this\` you want to call the function with\\n   * @returns {Function} The wrapped version of the supplied function\\n   */\\n  function fnBind(fn, that) {\\n    return function() {\\n      return fn.apply(that, arguments);\\n    };\\n  }\\n\\n  ;\\n\\n  /**\\n   * testDOMProps is a generic DOM property test; if a browser supports\\n   *   a certain property, it won't return undefined for it.\\n   *\\n   * @access private\\n   * @function testDOMProps\\n   * @param {Array<string>} props - An array of properties to test for\\n   * @param {object} obj - An object or Element you want to use to test the parameters again\\n   * @param {boolean|object} elem - An Element to bind the property lookup again. Use \`false\` to prevent the check\\n   * @returns {boolean|*} returns \`false\` if the prop is unsupported, otherwise the value that is supported\\n   */\\n  function testDOMProps(props, obj, elem) {\\n    var item;\\n\\n    for (var i in props) {\\n      if (props[i] in obj) {\\n\\n        // return the property name as a string\\n        if (elem === false) {\\n          return props[i];\\n        }\\n\\n        item = obj[props[i]];\\n\\n        // let's bind a function\\n        if (is(item, 'function')) {\\n          // bind to obj unless overridden\\n          return fnBind(item, elem || obj);\\n        }\\n\\n        // return the unbound function or obj or value\\n        return item;\\n      }\\n    }\\n    return false;\\n  }\\n\\n  ;\\n\\n  /**\\n   * testPropsAll tests a list of DOM properties we want to check against.\\n   * We specify literally ALL possible (known and/or likely) properties on\\n   * the element including the non-vendor prefixed one, for forward-\\n   * compatibility.\\n   *\\n   * @access private\\n   * @function testPropsAll\\n   * @param {string} prop - A string of the property to test for\\n   * @param {string|object} [prefixed] - An object to check the prefixed properties on. Use a string to skip\\n   * @param {HTMLElement|SVGElement} [elem] - An element used to test the property and value against\\n   * @param {string} [value] - A string of a css value\\n   * @param {boolean} [skipValueTest] - An boolean representing if you want to test if value sticks when set\\n   * @returns {string|boolean} returns the string version of the property, or \`false\` if it is unsupported\\n   */\\n  function testPropsAll(prop, prefixed, elem, value, skipValueTest) {\\n\\n    var ucProp = prop.charAt(0).toUpperCase() + prop.slice(1),\\n      props = (prop + ' ' + cssomPrefixes.join(ucProp + ' ') + ucProp).split(' ');\\n\\n    // did they call .prefixed('boxSizing') or are we just testing a prop?\\n    if (is(prefixed, 'string') || is(prefixed, 'undefined')) {\\n      return testProps(props, prefixed, value, skipValueTest);\\n\\n      // otherwise, they called .prefixed('requestAnimationFrame', window[, elem])\\n    } else {\\n      props = (prop + ' ' + (domPrefixes).join(ucProp + ' ') + ucProp).split(' ');\\n      return testDOMProps(props, prefixed, elem);\\n    }\\n  }\\n\\n  // Modernizr.testAllProps() investigates whether a given style property,\\n  // or any of its vendor-prefixed variants, is recognized\\n  //\\n  // Note that the property names must be provided in the camelCase variant.\\n  // Modernizr.testAllProps('boxSizing')\\n  ModernizrProto.testAllProps = testPropsAll;\\n\\n  \\n\\n  /**\\n   * testAllProps determines whether a given CSS property is supported in the browser\\n   *\\n   * @memberOf Modernizr\\n   * @name Modernizr.testAllProps\\n   * @optionName Modernizr.testAllProps()\\n   * @optionProp testAllProps\\n   * @access public\\n   * @function testAllProps\\n   * @param {string} prop - String naming the property to test (either camelCase or hyphen-case)\\n   * @param {string} [value] - String of the value to test\\n   * @param {boolean} [skipValueTest=false] - Whether to skip testing that the value is supported when using non-native detection\\n   * @returns {string|boolean} returns the string version of the property, or \`false\` if it is unsupported\\n   * @example\\n   *\\n   * testAllProps determines whether a given CSS property, in some prefixed form,\\n   * is supported by the browser.\\n   *\\n   * \`\`\`js\\n   * testAllProps('boxSizing')  // true\\n   * \`\`\`\\n   *\\n   * It can optionally be given a CSS value in string form to test if a property\\n   * value is valid\\n   *\\n   * \`\`\`js\\n   * testAllProps('display', 'block') // true\\n   * testAllProps('display', 'penguin') // false\\n   * \`\`\`\\n   *\\n   * A boolean can be passed as a third parameter to skip the value check when\\n   * native detection (@supports) isn't available.\\n   *\\n   * \`\`\`js\\n   * testAllProps('shapeOutside', 'content-box', true);\\n   * \`\`\`\\n   */\\n  function testAllProps(prop, value, skipValueTest) {\\n    return testPropsAll(prop, undefined, undefined, value, skipValueTest);\\n  }\\n\\n  ModernizrProto.testAllProps = testAllProps;\\n\\n  \\n/*!\\n{\\n  \\"name\\": \\"Flexbox\\",\\n  \\"property\\": \\"flexbox\\",\\n  \\"caniuse\\": \\"flexbox\\",\\n  \\"tags\\": [\\"css\\"],\\n  \\"notes\\": [{\\n    \\"name\\": \\"The _new_ flexbox\\",\\n    \\"href\\": \\"https://www.w3.org/TR/css-flexbox-1/\\"\\n  }],\\n  \\"warnings\\": [\\n    \\"A \`true\` result for this detect does not imply that the \`flex-wrap\` property is supported; see the \`flexwrap\` detect.\\"\\n  ]\\n}\\n!*/\\n/* DOC\\nDetects support for the Flexible Box Layout model, a.k.a. Flexbox, which allows easy manipulation of layout order and sizing within a container.\\n*/\\n\\n  Modernizr.addTest('flexbox', testAllProps('flexBasis', '1px', true));\\n\\n/*!\\n{\\n  \\"name\\": \\"ES6 Promises\\",\\n  \\"property\\": \\"promises\\",\\n  \\"caniuse\\": \\"promises\\",\\n  \\"polyfills\\": [\\"es6promises\\"],\\n  \\"authors\\": [\\"Krister Kari\\", \\"Jake Archibald\\"],\\n  \\"tags\\": [\\"es6\\"],\\n  \\"notes\\": [{\\n    \\"name\\": \\"The ES6 promises spec\\",\\n    \\"href\\": \\"https://github.com/domenic/promises-unwrapping\\"\\n  }, {\\n    \\"name\\": \\"Chromium dashboard - ES6 Promises\\",\\n    \\"href\\": \\"https://www.chromestatus.com/features/5681726336532480\\"\\n  }, {\\n    \\"name\\": \\"JavaScript Promises: an Introduction\\",\\n    \\"href\\": \\"https://developers.google.com/web/fundamentals/primers/promises/\\"\\n  }]\\n}\\n!*/\\n/* DOC\\nCheck if browser implements ECMAScript 6 Promises per specification.\\n*/\\n\\n  Modernizr.addTest('promises', function() {\\n    return 'Promise' in window &&\\n    // Some of these methods are missing from\\n    // Firefox/Chrome experimental implementations\\n    'resolve' in window.Promise &&\\n    'reject' in window.Promise &&\\n    'all' in window.Promise &&\\n    'race' in window.Promise &&\\n    // Older version of the spec had a resolver object\\n    // as the arg rather than a function\\n    (function() {\\n      var resolve;\\n      new window.Promise(function(r) { resolve = r; });\\n      return typeof resolve === 'function';\\n    }());\\n  });\\n\\n/*!\\n{\\n  \\"name\\": \\"ServiceWorker API\\",\\n  \\"property\\": \\"serviceworker\\",\\n  \\"caniuse\\": \\"serviceworkers\\",\\n  \\"notes\\": [{\\n    \\"name\\": \\"ServiceWorkers Explained\\",\\n    \\"href\\": \\"https://github.com/slightlyoff/ServiceWorker/blob/master/explainer.md\\"\\n  }]\\n}\\n!*/\\n/* DOC\\nServiceWorkers (formerly Navigation Controllers) are a way to persistently cache resources to built apps that work better offline.\\n*/\\n\\n  Modernizr.addTest('serviceworker', 'serviceWorker' in navigator);\\n\\n\\n  // Run each test\\n  testRunner();\\n\\n  // Remove the \\"no-js\\" class if it exists\\n  setClasses(classes);\\n\\n  delete ModernizrProto.addTest;\\n  delete ModernizrProto.addAsyncTest;\\n\\n  // Run the things that are supposed to run after the tests\\n  for (var i = 0; i < Modernizr._q.length; i++) {\\n    Modernizr._q[i]();\\n  }\\n\\n  // Leak Modernizr namespace\\n  scriptGlobalObject.Modernizr = Modernizr;\\n\\n\\n;\\n\\n})(window, window, document);\\n modernizr = window.Modernizr; if (hadGlobal) { window.Modernizr = oldGlobal; } else { delete window.Modernizr; } export default modernizr;",
  "map": null,
  "meta": null,
  "dependencies": [
    "test/fixtures/presets/modernizr.js"
  ],
  "contextDependencies": [],
  "buildDependencies": []
}"
`;

exports[`loader should pass on the code from the presets/modernizr fixture: warnings 1`] = `[]`;

exports[`loader should pass on the code from the simple fixture without options: errors 1`] = `[]`;

exports[`loader should pass on the code from the simple fixture without options: result 1`] = `
"{
  "content": "module.exports = \\"hello world\\";",
  "map": {
    "isASourceMap": true
  },
  "meta": {
    "isAnAst": true
  },
  "dependencies": [
    "test/fixtures/simple.js"
  ],
  "contextDependencies": [],
  "buildDependencies": []
}"
`;

exports[`loader should pass on the code from the simple fixture without options: warnings 1`] = `[]`;

exports[`loader should pass on the code from the simple fixture: errors 1`] = `[]`;

exports[`loader should pass on the code from the simple fixture: result 1`] = `
"{
  "content": "module.exports = \\"hello world\\";",
  "map": {
    "isASourceMap": true
  },
  "meta": {
    "isAnAst": true
  },
  "dependencies": [
    "test/fixtures/simple.js"
  ],
  "contextDependencies": [],
  "buildDependencies": []
}"
`;

exports[`loader should pass on the code from the simple fixture: warnings 1`] = `[]`;

exports[`loader should recognize modules produced by babel: errors 1`] = `[]`;

exports[`loader should recognize modules produced by babel: result 1`] = `
"{
  "content": "module.exports = \\"hello world\\";",
  "map": null,
  "meta": null,
  "dependencies": [
    "test/fixtures/babel.js"
  ],
  "contextDependencies": [],
  "buildDependencies": []
}"
`;

exports[`loader should recognize modules produced by babel: warnings 1`] = `[]`;

exports[`loader should report require() errors with a useful stacktrace: errors 1`] = `
[
  "ModuleBuildError: Module build failed (from \`replaced original path\`):
Error: Unable to execute "/test/fixtures/error-require.js": Error: This is a typical require() error",
]
`;

exports[`loader should report require() errors with a useful stacktrace: warnings 1`] = `[]`;

exports[`loader should throw a useful error message if the exported function returns a wrong object (async): errors 1`] = `
[
  "ModuleBuildError: Module build failed (from \`replaced original path\`):
Error: The returned result of module "/test/fixtures/error-return-async-wrong-obj.js" is not an object with a "code" property",
]
`;

exports[`loader should throw a useful error message if the exported function returns a wrong object (async): warnings 1`] = `[]`;

exports[`loader should throw a useful error message if the exported function returns a wrong object (sync): errors 1`] = `
[
  "ModuleBuildError: Module build failed (from \`replaced original path\`):
Error: The returned result of module "/test/fixtures/error-return-sync-wrong-obj.js" is not an object with a "code" property",
]
`;

exports[`loader should throw a useful error message if the exported function returns a wrong object (sync): warnings 1`] = `[]`;

exports[`loader should throw a useful error message if the exported function returns code that is neither a string nor an instanceof Buffer (async): errors 1`] = `
[
  "ModuleBuildError: Module build failed (from \`replaced original path\`):
Error: The returned code of module "/test/fixtures/error-return-async-invalid-code.js" is neither a string nor an instance of Buffer",
]
`;

exports[`loader should throw a useful error message if the exported function returns code that is neither a string nor an instanceof Buffer (async): warnings 1`] = `[]`;

exports[`loader should throw a useful error message if the exported function returns code that is neither a string nor an instanceof Buffer (sync): errors 1`] = `
[
  "ModuleBuildError: Module build failed (from \`replaced original path\`):
Error: The returned code of module "/test/fixtures/error-return-sync-invalid-code.js" is neither a string nor an instance of Buffer",
]
`;

exports[`loader should throw a useful error message if the exported function returns code that is neither a string nor an instanceof Buffer (sync): warnings 1`] = `[]`;

exports[`loader should throw a useful error message if the module exports not a function: errors 1`] = `
[
  "ModuleBuildError: Module build failed (from \`replaced original path\`):
Error: Module "/test/fixtures/error-export-null.js" does not export a function as default",
]
`;

exports[`loader should throw a useful error message if the module exports not a function: warnings 1`] = `[]`;

exports[`loader should work the same if a promise is returned #2: errors 1`] = `[]`;

exports[`loader should work the same if a promise is returned #2: result 1`] = `
"{
  "content": "module.exports = \\"hello world\\";",
  "map": {
    "isASourceMap": true
  },
  "meta": {
    "isAnAst": true
  },
  "dependencies": [
    "test/fixtures/promise-compex.js"
  ],
  "contextDependencies": [],
  "buildDependencies": []
}"
`;

exports[`loader should work the same if a promise is returned #2: warnings 1`] = `[]`;

exports[`loader should work the same if a promise is returned: errors 1`] = `[]`;

exports[`loader should work the same if a promise is returned: result 1`] = `
"{
  "content": "module.exports = \\"hello world\\";",
  "map": {
    "isASourceMap": true
  },
  "meta": {
    "isAnAst": true
  },
  "dependencies": [
    "test/fixtures/promise.js"
  ],
  "contextDependencies": [],
  "buildDependencies": []
}"
`;

exports[`loader should work the same if a promise is returned: warnings 1`] = `[]`;

exports[`loader should work with ES modules code: errors 1`] = `[]`;

exports[`loader should work with ES modules code: result 1`] = `
"{
  "content": "module.exports = \\"hello world\\";",
  "map": {
    "isASourceMap": true
  },
  "meta": {
    "isAnAst": true
  },
  "dependencies": [
    "test/fixtures/code-commonjs.js"
  ],
  "contextDependencies": [],
  "buildDependencies": []
}"
`;

exports[`loader should work with ES modules code: warnings 1`] = `[]`;

exports[`loader should work with async function: errors 1`] = `[]`;

exports[`loader should work with async function: result 1`] = `
"{
  "content": "module.exports = \\"hello world\\";",
  "map": {
    "isASourceMap": true
  },
  "meta": {
    "isAnAst": true
  },
  "dependencies": [
    "test/fixtures/async-function.js"
  ],
  "contextDependencies": [],
  "buildDependencies": []
}"
`;

exports[`loader should work with async function: warnings 1`] = `[]`;

exports[`loader should work with commonjs code: errors 1`] = `[]`;

exports[`loader should work with commonjs code: result 1`] = `
"{
  "content": "export default \\"hello world\\";",
  "map": {
    "isASourceMap": true
  },
  "meta": {
    "isAnAst": true
  },
  "dependencies": [
    "test/fixtures/code-es.js"
  ],
  "contextDependencies": [],
  "buildDependencies": []
}"
`;

exports[`loader should work with commonjs code: warnings 1`] = `[]`;
